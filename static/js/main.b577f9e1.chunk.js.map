{"version":3,"sources":["components/SetTimer.js","components/TimerDisplay.js","components/TimerControls.js","App.js","serviceWorker.js","index.js"],"names":["SetTimer","className","id","onClick","this","props","handleIncDec","value","breakLength","timerType","sessionLength","Component","TimerDisplay","renderTwoDigits","displayMinutes","displaySeconds","TimerControls","handlePlayStop","displayButtonAction","resetTimer","App","console","log","state","buttonAction","handlePlay","handlePause","time","minutes","seconds","interval","setState","Math","floor","audioRender","autoPlay","src","switchTimerType","timer","setInterval","clearInterval","input","output","toString","length","event","target","defaultSessionLength","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b577f9e1.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport '../App.css';\r\n\r\nexport default class SetTimer extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"setTimer\">\r\n                <button className=\"button\" id=\"break-decrement\" onClick={this.props.handleIncDec} value=\"break-dec\">Dec</button>\r\n                {this.props.breakLength}\r\n                <button className=\"button\" id=\"break-increment\" onClick={this.props.handleIncDec} value=\"break-inc\">Inc</button>\r\n                {this.props.timerType}\r\n                <button className=\"button\" id=\"session-decrement\" onClick={this.props.handleIncDec} value=\"session-dec\">Dec</button>\r\n                {this.props.sessionLength}\r\n                <button className=\"button\" id=\"session-increment\" onClick={this.props.handleIncDec} value=\"session-inc\">Inc</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport '../App.css';\r\n\r\nexport default class TimerDisplay extends Component {\r\n    render() {\r\n        return (\r\n            <div id=\"time-left\">\r\n                {this.props.renderTwoDigits(this.props.displayMinutes)}:{this.props.renderTwoDigits(this.props.displaySeconds)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport '../App.css';\r\n\r\nexport default class TimerControls extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button className=\"button\" onClick={this.props.handlePlayStop}>{this.props.displayButtonAction}</button>\r\n                <button className=\"button\" onClick={this.props.resetTimer}>reset</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport SetTimer from './components/SetTimer';\nimport TimerDisplay from './components/TimerDisplay';\nimport TimerControls from './components/TimerControls';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n  \n    this.audioRender = '';\n    this.defaultSessionLength = 25;\n    this.state = {\n      minutes: this.defaultSessionLength,\n      seconds: 0,\n      buttonAction: 'start',\n      timerType: 'session',\n      breakLength: 5,\n      sessionLength: this.defaultSessionLength\n    }\n  }\n  \n  \n  \n  handlePlayStop = () => {\n    console.log('clicked'); \n    if (this.state.buttonAction === 'start'){\n      this.handlePlay();\n    }else {\n      this.handlePause();\n    }\n  }\n  handlePlay = () => {\n    let time = (this.state.minutes * 60) + this.state.seconds;\n    const interval = () => {\n      this.setState({\n        minutes: Math.floor(time / 60),\n        seconds: time % 60,\n        buttonAction: 'pause',\n        timerType: this.state.timerType,\n        breakLength: this.state.breakLength,\n        sessionLength:  this.state.sessionLength\n      });\n      time--;\n      if (time === -1){\n        this.audioRender= <audio id=\"beep\" autoPlay src=\"./alerm.mp3\"></audio> ;\n        this.switchTimerType();\n        time = this.state.minutes * 60;\n        interval();\n      }\n    };\n    interval();\n    this.timer = setInterval(interval,1000);\n  }\n  handlePause = () => {\n    this.setState({\n      minutes: this.state.minutes,\n      seconds: this.state.seconds,\n      buttonAction: 'start',\n      timerType: this.state.timerType,\n      breakLength: this.state.breakLength,\n      sessionLength:  this.state.sessionLength\n    });\n    clearInterval(this.timer);\n  }\n\n  renderTwoDigits = (input) => {\n    let output = input.toString();\n    return output.length < 2 ?\n      '0' + output :\n      output;    \n  }\n\n  switchTimerType = () =>{\n    if (this.state.timerType === 'session'){\n      this.setState({\n        minutes: this.state.breakLength,\n        seconds: 0,\n        buttonAction: 'pause',\n        timerType: 'break',\n        breakLength: this.state.breakLength,\n        sessionLength:  this.state.sessionLength\n      })\n\n    }else {\n      this.setState({\n        minutes: this.state.sessionLength,\n        seconds: 0,\n        buttonAction: 'pause',\n        timerType: 'session',\n        breakLength: this.state.breakLength,\n        sessionLength:  this.state.sessionLength\n      })\n    }\n  }\n\n  handleIncDec = (event) => {\n    if(this.state.buttonAction === 'start'){\n      if(this.state.timerType === 'session'){\n        switch(event.target.value){\n          case \"break-dec\":\n            if(this.state.breakLength > 1){\n              this.setState({\n                minutes: this.state.minutes,\n                seconds: this.state.seconds,\n                buttonAction: this.state.buttonAction,\n                timerType: this.state.timerType,\n                breakLength: this.state.breakLength - 1,\n                sessionLength: this.state.sessionLength,\n              });\n            }\n            break;\n          case \"break-inc\":\n            this.setState({\n              minutes: this.state.minutes,\n              seconds: this.state.seconds,\n              buttonAction: this.state.buttonAction,\n              timerType: this.state.timerType,\n              breakLength: this.state.breakLength + 1,\n              sessionLength: this.state.sessionLength,\n            });        \n            break;\n          case \"session-dec\":\n              if(this.state.sessionLength > 1) {\n                this.setState({\n                  minutes: this.state.sessionLength - 1,\n                  seconds: 0,\n                  buttonAction: this.state.buttonAction,\n                  timerType: this.state.timerType,\n                  breakLength: this.state.breakLength,\n                  sessionLength: this.state.sessionLength - 1,\n                });\n              }        \n            break;\n          case \"session-inc\":\n            this.setState({\n              minutes: this.state.sessionLength + 1,\n              seconds: 0,\n              buttonAction: this.state.buttonAction,\n              timerType: this.state.timerType,\n              breakLength: this.state.breakLength,\n              sessionLength: this.state.sessionLength + 1,\n            });\n            break;\n          default:\n            break;\n        }\n      }else {\n        switch(event.target.value){\n          case \"break-dec\":\n            if (this.state.breakLength > 1){\n              this.setState({\n                minutes: this.state.breakLength - 1,\n                seconds: 0,\n                buttonAction: this.state.buttonAction,\n                timerType: this.state.timerType,\n                breakLength: this.state.breakLength - 1,\n                sessionLength: this.state.sessionLength,\n              });\n            }\n            break;\n          case \"break-inc\":\n            this.setState({\n              minutes: this.state.breakLength + 1,\n              seconds: 0,\n              buttonAction: this.state.buttonAction,\n              timerType: this.state.timerType,\n              breakLength: this.state.breakLength + 1,\n              sessionLength: this.state.sessionLength,\n            });        \n            break;\n          case \"session-dec\":\n            if(this.state.sessionLength > 1){\n              this.setState({\n                minutes: this.state.minutes,\n                seconds: this.state.seconds,\n                buttonAction: this.state.buttonAction,\n                timerType: this.state.timerType,\n                breakLength: this.state.breakLength,\n                sessionLength: this.state.sessionLength - 1,\n              });     \n            }   \n            break;\n          case \"session-inc\":\n            this.setState({\n              minutes: this.state.minutes,\n              seconds: this.state.seconds,\n              buttonAction: this.state.buttonAction,\n              timerType: this.state.timerType,\n              breakLength: this.state.breakLength,\n              sessionLength: this.state.sessionLength + 1,\n            });\n            break;\n          default:\n            break;\n        }\n      }\n    }\n  }\n  resetTimer = () => {\n    this.setState({\n        minutes: this.state.sessionLength,\n        seconds: 0,\n        buttonAction: \"start\",\n        timerType: 'session',\n        breakLength: this.state.breakLength,\n        sessionLength: this.state.sessionLength\n    });\n    clearInterval(this.timer);\n  }\n\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>POMODORO CLOCK</h1>\n        <SetTimer breakLength={this.state.breakLength} sessionLength={this.state.sessionLength} handleIncDec={this.handleIncDec} timerType={this.state.timerType}/>\n        <TimerDisplay displayMinutes={this.state.minutes} displaySeconds={this.state.seconds} renderTwoDigits={this.renderTwoDigits}/>\n        <TimerControls handlePlayStop={this.handlePlayStop} displayButtonAction={this.state.buttonAction} resetTimer={this.resetTimer}/>\n        {this.audioRender}\n      </div>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}